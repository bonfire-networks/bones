<div>
  <h1 class="text-4xl font-medium">{l("Settings")}</h1>

  Publication details
  - Name
  - Tagline
  - Description
  - Logo
  - Cover image

  - Show authors?
  - Show comments?

  <div class="pb-6 max-w-screen-md bg-base-100 rounded shadow-sm border border-base-content/10 mx-auto">
    {#if Bonfire.Boundaries.can?(@__context__, :describe, :instance)}
      <div class="p-3 border-b border-base-content/10 text-sm font-medium">{l("Publication details")}</div>
      <div class="flex flex-col gap-4 p-3">
        <div>General</div>
        <div class="flex gap-3 items-start flex-col">
          <div class="flex flex-col gap-2">
            <span class="text-sm font-medium">{l("Publication Logo")}</span>
            <StatefulComponent
              module={maybe_component(Bonfire.Files.Web.UploadIconLive, @__context__)}
              id={:upload_icon}
              wrapper_class="flex items-center gap-4 flex-col"
              container_class="relative flex-shrink-0 block w-24 h-24 overflow-hidden"
              class="inline-block overflow-hidden w-24 h-24"
              label_on_hover={false}
              label={l("icon")}
              object={:instance}
              boundary_verb={:describe}
              src={Bonfire.Common.Settings.get(
                [:bonfire, :ui, :theme, :instance_icon],
                "",
                @__context__[:instance_settings] || :instance
              )}
              set_field={[:bonfire, :ui, :theme, :instance_icon]}
              set_fn={&Bonfire.Common.Settings.LiveHandler.set_image_setting/5}
            />
          </div>
          <Bonfire.UI.Common.SettingsInputLive
            scope={:instance}
            input="ui[theme][instance_name]"
            name={l("Publication Title")}
            keys={[:ui, :theme, :instance_name]}
            default_value={Config.get([:ui, :theme, :instance_name], Bonfire.Application.name())}
          />
        </div>
        <div>Homepage</div>

        <div class="flex flex-col gap-6 w-full">
          <Bonfire.UI.Common.SettingsTextareaLive
            scope={:instance}
            input="ui[theme][instance_welcome, :title]"
            name={l("Welcome Title")}
            keys={[:ui, :theme, :instance_welcome, :title]}
            default_value={Config.get([:ui, :theme, :instance_welcome, :title], nil)}
          />
          <Bonfire.UI.Common.SettingsTextareaLive
            scope={:instance}
            input="ui[theme][instance_welcome, :description]"
            name={l("Welcome Description")}
            keys={[:ui, :theme, :instance_welcome, :description]}
            default_value={Config.get([:ui, :theme, :instance_welcome, :description], nil)}
          />
        </div>

        <div>
          <div>About</div>
          <span class="text-sm font-medium">{l("Publication Banner")}</span>
          <StatefulComponent
            module={maybe_component(Bonfire.Files.Web.UploadBannerLive, @__context__)}
            id={:upload_banner}
            object={:instance}
            boundary_verb={:describe}
            src={Bonfire.Common.Settings.get(
              [:bonfire, :ui, :theme, :instance_image],
              "",
              @__context__[:instance_settings] || :instance
            )}
            set_field={[:bonfire, :ui, :theme, :instance_image]}
            set_fn={&Bonfire.Common.Settings.LiveHandler.set_image_setting/5}
          />
        </div>
        <div class="flex w-full items-start gap-6 p-4">
          <div class="flex flex-col gap-6 w-full">
            <Bonfire.UI.Common.SettingsTextareaLive
              scope={:instance}
              input="ui[theme][instance_tagline]"
              name={l("Publication Tagline")}
              keys={[:ui, :theme, :instance_tagline]}
              default_value={Config.get([:ui, :theme, :instance_tagline], nil)}
            />
            <Bonfire.UI.Common.SettingsTextareaLive
              scope={:instance}
              input="ui[theme][instance_description]"
              name={l("Publication Description")}
              keys={[:ui, :theme, :instance_description]}
              default_value={Config.get([:ui, :theme, :instance_description], nil)}
            />
          </div>
        </div>
      </div>
    {#else}
      {l("You don't have permission to describe the instance, sorry!")}
    {/if}

    {#if Bonfire.Boundaries.can?(@__context__, :configure, :instance)}
      <div class="border-t border-t-8 border-base-content/10">
        <div class="p-3 border-b border-base-content/10 text-sm font-medium">{l("Federation & Privacy")}</div>

        <form phx-change="Bonfire.Common.Settings:set">
          <input name="scope" value={:instance} type="hidden">

          <div class="divide-y divide-base-content/10 flex flex-col gap-4 w-full">
            <div class="flex flex-col gap-2 p-4">
              <span class="font-medium text-sm">{l("Federation")}</span>
              <Bonfire.UI.Common.SettingsRadiosLive
                name={l("Enable federation?")}
                keys={[:activity_pub, :instance, :federating]}
                options={%{
                  "true" => l("Automatic: Push activities to the fediverse, and accept remote activities"),
                  "nil" => l("Manual: Enable looking up usernames or fetching individual posts or activities"),
                  "false" => l("Fully disabled")
                }}
                scope={:instance}
              />
            </div>
            <Bonfire.UI.Common.SettingsToggleLive
              name={l("Require authentication from federated servers")}
              description={l(
                "Enables stricter enforcement of users' boundaries and blocks, as well as instance-wide blocks. Please note that this may reduce performance, reach, and/or  compatibility with some federated apps. In addition, this does not fully prevent public posts and profiles from being fetched by third parties."
              )}
              keys={[:activity_pub, :reject_unsigned]}
              scope={:instance}
            />

            <Bonfire.UI.Common.SettingsToggleLive
              name={l("Make the instance invite only")}
              description={l("Only people with a valid invite link can sign up to this instance.")}
              keys={[:invite_only]}
              scope={:instance}
            />
          </div>
        </form>
      </div>

      <div class="border-t border-t-8 border-base-content/10">
        <div class="p-3 border-b border-base-content/10 text-sm font-medium">{l("General Settings")}</div>
        <form phx-change="Bonfire.Common.Settings:set" class="divide-y divide-base-content/10">
          <!-- <input name="scope" value={:instance} type="hidden"> -->

          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum number of users per account")}
            keys={[Bonfire.UI.Me.SwitchUserViewLive.AccountUsersLive, :max_users]}
            unit={l("users")}
            default_value={4}
          />

          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum length of text inputs (e.g. posts)")}
            keys={[Bonfire.UI.Common.SmartInputLive, :max_length]}
            unit={l("words")}
            default_value={nil}
          />

          {!-- MAX AMOUNT OF FILES ONE CAN ATTACH TO A POST OR OTHER ACTIVITIES --}
          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum amount of files one can attach to a post or other activity")}
            keys={[Bonfire.UI.Common.SmartInputLive, :max_uploads]}
            unit={l("items")}
            default_value={4}
          />
        </form>
      </div>

      <div class="border-t border-t-8 border-base-content/10">
        <div class="p-3 border-b border-base-content/10 text-sm font-medium">{l("Server Optmisations")}</div>
        <form phx-change="Bonfire.Common.Settings:set" class="divide-y divide-base-content/10">
          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum number of items to query in lists")}
            description={l("Please note that a high limit may be desired in order to properly display nested threads")}
            keys={[:pagination_hard_max_limit]}
            unit={l("items")}
          />

          {!-- MAX FILE SIZE --}
          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum file size of uploads attached to a post or other activity")}
            description={l(
              "Please note that a high limit can your instance's impact resource use (and it is recommended to store uploads using an S3-style cloud storage rather than directly on the server file system)."
            )}
            keys={[:bonfire_files, :max_docs_file_size]}
            unit={l("MB")}
          />

          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum file size of uploads like avatars or banners")}
            description={l(
              "Note that they will be automatically resized on the server, so a higher limit here may be reasonable."
            )}
            keys={[:bonfire_files, :max_user_images_file_size]}
            unit={l("MB")}
          />

          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum dimensions when resizing an avatar")}
            keys={[Bonfire.UI.Common.SmartInputLive, :max_dimensions_avatar]}
            unit={l("px")}
          />

          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum dimensions when resizing a banner")}
            keys={[Bonfire.UI.Common.SmartInputLive, :max_dimensions_banner]}
            unit={l("px")}
          />

          <Bonfire.UI.Common.Settings.NumberLive
            scope={:instance}
            name={l("Maximum dimensions when resizing images")}
            keys={[Bonfire.UI.Common.SmartInputLive, :max_dimensions_banner]}
            unit={l("px")}
          />
        </form>
      </div>
      {!-- <div class="!mt-8 m-3 text-xs tracking-wide uppercase text-base-content/70 font-medium">{l("Advanced settings")}</div> --}
    {#else}
      {l("You don't have permission to configure the instance, sorry!")}
    {/if}
  </div>
</div>